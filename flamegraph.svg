<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="33031"><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.10%)</title><rect x="0.0091%" y="133" width="0.1029%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="34"/><text x="0.2591%" y="143.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (15 samples, 0.05%)</title><rect x="0.1120%" y="133" width="0.0454%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="15"/><text x="0.3620%" y="143.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.01%)</title><rect x="0.1574%" y="133" width="0.0121%" height="15" fill="rgb(221,193,54)" fg:x="52" fg:w="4"/><text x="0.4074%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.04%)</title><rect x="6.2335%" y="117" width="0.0394%" height="15" fill="rgb(248,212,6)" fg:x="2059" fg:w="13"/><text x="6.4835%" y="127.50"></text></g><g><title>satrunner_server`parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.01%)</title><rect x="6.2820%" y="117" width="0.0121%" height="15" fill="rgb(208,68,35)" fg:x="2075" fg:w="4"/><text x="6.5320%" y="127.50"></text></g><g><title>satrunner_server`parking_lot::condvar::Condvar::wait_until_internal (10 samples, 0.03%)</title><rect x="6.2941%" y="117" width="0.0303%" height="15" fill="rgb(232,128,0)" fg:x="2079" fg:w="10"/><text x="6.5441%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (109 samples, 0.33%)</title><rect x="9.2580%" y="101" width="0.3300%" height="15" fill="rgb(207,160,47)" fg:x="3058" fg:w="109"/><text x="9.5080%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (7 samples, 0.02%)</title><rect x="9.5880%" y="101" width="0.0212%" height="15" fill="rgb(228,23,34)" fg:x="3167" fg:w="7"/><text x="9.8380%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (18 samples, 0.05%)</title><rect x="9.6092%" y="101" width="0.0545%" height="15" fill="rgb(218,30,26)" fg:x="3174" fg:w="18"/><text x="9.8592%" y="111.50"></text></g><g><title>satrunner_server`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.24%)</title><rect x="9.6636%" y="101" width="0.2392%" height="15" fill="rgb(220,122,19)" fg:x="3192" fg:w="79"/><text x="9.9136%" y="111.50"></text></g><g><title>satrunner_server`DYLD-STUB$$pthread_mutex_lock (4 samples, 0.01%)</title><rect x="9.9058%" y="101" width="0.0121%" height="15" fill="rgb(250,228,42)" fg:x="3272" fg:w="4"/><text x="10.1558%" y="111.50"></text></g><g><title>satrunner_server`DYLD-STUB$$pthread_mutex_unlock (54 samples, 0.16%)</title><rect x="9.9180%" y="101" width="0.1635%" height="15" fill="rgb(240,193,28)" fg:x="3276" fg:w="54"/><text x="10.1680%" y="111.50"></text></g><g><title>satrunner_server`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (4 samples, 0.01%)</title><rect x="10.0814%" y="101" width="0.0121%" height="15" fill="rgb(216,20,37)" fg:x="3330" fg:w="4"/><text x="10.3314%" y="111.50"></text></g><g><title> 32]&gt; (4 samples, 0.01%)</title><rect x="10.0814%" y="85" width="0.0121%" height="15" fill="rgb(206,188,39)" fg:x="3330" fg:w="4"/><text x="10.3314%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (15,614 samples, 47.27%)</title><rect x="13.1331%" y="85" width="47.2707%" height="15" fill="rgb(217,207,13)" fg:x="4338" fg:w="15614"/><text x="13.3831%" y="95.50">libsystem_kernel.dylib`__psynch_cvwait</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (43 samples, 0.13%)</title><rect x="60.7581%" y="69" width="0.1302%" height="15" fill="rgb(231,73,38)" fg:x="20069" fg:w="43"/><text x="61.0081%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (36 samples, 0.11%)</title><rect x="60.8883%" y="69" width="0.1090%" height="15" fill="rgb(225,20,46)" fg:x="20112" fg:w="36"/><text x="61.1383%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (36 samples, 0.11%)</title><rect x="60.8883%" y="53" width="0.1090%" height="15" fill="rgb(210,31,41)" fg:x="20112" fg:w="36"/><text x="61.1383%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (30 samples, 0.09%)</title><rect x="60.9972%" y="69" width="0.0908%" height="15" fill="rgb(221,200,47)" fg:x="20148" fg:w="30"/><text x="61.2472%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (269 samples, 0.81%)</title><rect x="60.4039%" y="85" width="0.8144%" height="15" fill="rgb(226,26,5)" fg:x="19952" fg:w="269"/><text x="60.6539%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (43 samples, 0.13%)</title><rect x="61.0881%" y="69" width="0.1302%" height="15" fill="rgb(249,33,26)" fg:x="20178" fg:w="43"/><text x="61.3381%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (81 samples, 0.25%)</title><rect x="61.2213%" y="85" width="0.2452%" height="15" fill="rgb(235,183,28)" fg:x="20222" fg:w="81"/><text x="61.4713%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (33 samples, 0.10%)</title><rect x="61.4665%" y="85" width="0.0999%" height="15" fill="rgb(221,5,38)" fg:x="20303" fg:w="33"/><text x="61.7165%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (42 samples, 0.13%)</title><rect x="61.5664%" y="85" width="0.1272%" height="15" fill="rgb(247,18,42)" fg:x="20336" fg:w="42"/><text x="61.8164%" y="95.50"></text></g><g><title>satrunner_server`parking_lot::condvar::Condvar::wait_until_internal (17,045 samples, 51.60%)</title><rect x="10.0935%" y="101" width="51.6030%" height="15" fill="rgb(241,131,45)" fg:x="3334" fg:w="17045"/><text x="10.3435%" y="111.50">satrunner_server`parking_lot::condvar::Condvar::wait_until_internal</text></g><g><title>satrunner_server`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (7 samples, 0.02%)</title><rect x="61.6996%" y="101" width="0.0212%" height="15" fill="rgb(249,31,29)" fg:x="20380" fg:w="7"/><text x="61.9496%" y="111.50"></text></g><g><title>satrunner_server`tokio::process::imp::GlobalOrphanQueue::reap_orphans (18 samples, 0.05%)</title><rect x="61.7208%" y="101" width="0.0545%" height="15" fill="rgb(225,111,53)" fg:x="20387" fg:w="18"/><text x="61.9708%" y="111.50"></text></g><g><title>satrunner_server`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.05%)</title><rect x="61.8843%" y="85" width="0.0515%" height="15" fill="rgb(238,160,17)" fg:x="20441" fg:w="17"/><text x="62.1343%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5 samples, 0.02%)</title><rect x="61.9358%" y="85" width="0.0151%" height="15" fill="rgb(214,148,48)" fg:x="20458" fg:w="5"/><text x="62.1858%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.05%)</title><rect x="62.1144%" y="69" width="0.0454%" height="15" fill="rgb(232,36,49)" fg:x="20517" fg:w="15"/><text x="62.3644%" y="79.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (136 samples, 0.41%)</title><rect x="61.7753%" y="101" width="0.4117%" height="15" fill="rgb(209,103,24)" fg:x="20405" fg:w="136"/><text x="62.0253%" y="111.50"></text></g><g><title>satrunner_server`tokio::runtime::task::waker::wake_by_val (75 samples, 0.23%)</title><rect x="61.9600%" y="85" width="0.2271%" height="15" fill="rgb(229,88,8)" fg:x="20466" fg:w="75"/><text x="62.2100%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (9 samples, 0.03%)</title><rect x="62.1598%" y="69" width="0.0272%" height="15" fill="rgb(213,181,19)" fg:x="20532" fg:w="9"/><text x="62.4098%" y="79.50"></text></g><g><title>satrunner_server`tokio::runtime::signal::Driver::process (11 samples, 0.03%)</title><rect x="62.1870%" y="101" width="0.0333%" height="15" fill="rgb(254,191,54)" fg:x="20541" fg:w="11"/><text x="62.4370%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (19 samples, 0.06%)</title><rect x="62.3596%" y="85" width="0.0575%" height="15" fill="rgb(241,83,37)" fg:x="20598" fg:w="19"/><text x="62.6096%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`kevent (5,208 samples, 15.77%)</title><rect x="62.4171%" y="85" width="15.7670%" height="15" fill="rgb(233,36,39)" fg:x="20617" fg:w="5208"/><text x="62.6671%" y="95.50">libsystem_kernel.dylib`k..</text></g><g><title>satrunner_server`DYLD-STUB$$clock_gettime (7 samples, 0.02%)</title><rect x="78.1841%" y="85" width="0.0212%" height="15" fill="rgb(226,3,54)" fg:x="25825" fg:w="7"/><text x="78.4341%" y="95.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (5 samples, 0.02%)</title><rect x="78.2507%" y="53" width="0.0151%" height="15" fill="rgb(245,192,40)" fg:x="25847" fg:w="5"/><text x="78.5007%" y="63.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (17 samples, 0.05%)</title><rect x="78.2689%" y="53" width="0.0515%" height="15" fill="rgb(238,167,29)" fg:x="25853" fg:w="17"/><text x="78.5189%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (6 samples, 0.02%)</title><rect x="78.3022%" y="37" width="0.0182%" height="15" fill="rgb(232,182,51)" fg:x="25864" fg:w="6"/><text x="78.5522%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (89 samples, 0.27%)</title><rect x="78.3204%" y="53" width="0.2694%" height="15" fill="rgb(231,60,39)" fg:x="25870" fg:w="89"/><text x="78.5704%" y="63.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (129 samples, 0.39%)</title><rect x="78.2083%" y="69" width="0.3905%" height="15" fill="rgb(208,69,12)" fg:x="25833" fg:w="129"/><text x="78.4583%" y="79.50"></text></g><g><title>satrunner_server`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (134 samples, 0.41%)</title><rect x="78.2083%" y="85" width="0.4057%" height="15" fill="rgb(235,93,37)" fg:x="25833" fg:w="134"/><text x="78.4583%" y="95.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (5 samples, 0.02%)</title><rect x="78.5989%" y="69" width="0.0151%" height="15" fill="rgb(213,116,39)" fg:x="25962" fg:w="5"/><text x="78.8489%" y="79.50"></text></g><g><title>satrunner_server`tokio::process::imp::GlobalOrphanQueue::reap_orphans (19 samples, 0.06%)</title><rect x="78.6140%" y="85" width="0.0575%" height="15" fill="rgb(222,207,29)" fg:x="25967" fg:w="19"/><text x="78.8640%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::io::Driver::turn (22 samples, 0.07%)</title><rect x="78.6716%" y="85" width="0.0666%" height="15" fill="rgb(206,96,30)" fg:x="25986" fg:w="22"/><text x="78.9216%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::signal::Driver::process (26 samples, 0.08%)</title><rect x="78.7382%" y="85" width="0.0787%" height="15" fill="rgb(218,138,4)" fg:x="26008" fg:w="26"/><text x="78.9882%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::time::Driver::park_internal (5,498 samples, 16.64%)</title><rect x="62.2234%" y="101" width="16.6450%" height="15" fill="rgb(250,191,14)" fg:x="20553" fg:w="5498"/><text x="62.4734%" y="111.50">satrunner_server`tokio::ru..</text></g><g><title>satrunner_server`tokio::runtime::time::wheel::Wheel::next_expiration (17 samples, 0.05%)</title><rect x="78.8169%" y="85" width="0.0515%" height="15" fill="rgb(239,60,40)" fg:x="26034" fg:w="17"/><text x="79.0669%" y="95.50"></text></g><g><title>satrunner_server`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (80 samples, 0.24%)</title><rect x="78.9501%" y="85" width="0.2422%" height="15" fill="rgb(206,27,48)" fg:x="26078" fg:w="80"/><text x="79.2001%" y="95.50"></text></g><g><title> 32]&gt; (80 samples, 0.24%)</title><rect x="78.9501%" y="69" width="0.2422%" height="15" fill="rgb(225,35,8)" fg:x="26078" fg:w="80"/><text x="79.2001%" y="79.50"></text></g><g><title>satrunner_server`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (142 samples, 0.43%)</title><rect x="78.8683%" y="101" width="0.4299%" height="15" fill="rgb(250,213,24)" fg:x="26051" fg:w="142"/><text x="79.1183%" y="111.50"></text></g><g><title>satrunner_server`tokio::runtime::time::wheel::Wheel::next_expiration (31 samples, 0.09%)</title><rect x="79.2044%" y="85" width="0.0939%" height="15" fill="rgb(247,123,22)" fg:x="26162" fg:w="31"/><text x="79.4544%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (24,105 samples, 72.98%)</title><rect x="6.3334%" y="117" width="72.9769%" height="15" fill="rgb(231,138,38)" fg:x="2092" fg:w="24105"/><text x="6.5834%" y="127.50">satrunner_server`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout</text></g><g><title>satrunner_server`tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.01%)</title><rect x="79.2982%" y="101" width="0.0121%" height="15" fill="rgb(231,145,46)" fg:x="26193" fg:w="4"/><text x="79.5482%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (10 samples, 0.03%)</title><rect x="79.5404%" y="101" width="0.0303%" height="15" fill="rgb(251,118,11)" fg:x="26273" fg:w="10"/><text x="79.7904%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (10 samples, 0.03%)</title><rect x="79.5404%" y="85" width="0.0303%" height="15" fill="rgb(217,147,25)" fg:x="26273" fg:w="10"/><text x="79.7904%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (5 samples, 0.02%)</title><rect x="79.5707%" y="101" width="0.0151%" height="15" fill="rgb(247,81,37)" fg:x="26283" fg:w="5"/><text x="79.8207%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (11 samples, 0.03%)</title><rect x="79.5889%" y="101" width="0.0333%" height="15" fill="rgb(209,12,38)" fg:x="26289" fg:w="11"/><text x="79.8389%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="79.7039%" y="85" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="26327" fg:w="4"/><text x="79.9539%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4,982 samples, 15.08%)</title><rect x="79.7160%" y="85" width="15.0828%" height="15" fill="rgb(248,47,43)" fg:x="26331" fg:w="4982"/><text x="79.9660%" y="95.50">libsystem_kernel.dylib`..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (15 samples, 0.05%)</title><rect x="94.7988%" y="85" width="0.0454%" height="15" fill="rgb(221,10,30)" fg:x="31313" fg:w="15"/><text x="95.0488%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (4 samples, 0.01%)</title><rect x="94.8503%" y="85" width="0.0121%" height="15" fill="rgb(210,229,1)" fg:x="31330" fg:w="4"/><text x="95.1003%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.01%)</title><rect x="94.8624%" y="85" width="0.0121%" height="15" fill="rgb(222,148,37)" fg:x="31334" fg:w="4"/><text x="95.1124%" y="95.50"></text></g><g><title>satrunner_server`parking_lot_core::parking_lot::lock_bucket_pair (21 samples, 0.06%)</title><rect x="94.8745%" y="85" width="0.0636%" height="15" fill="rgb(234,67,33)" fg:x="31338" fg:w="21"/><text x="95.1245%" y="95.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (12 samples, 0.04%)</title><rect x="94.9805%" y="53" width="0.0363%" height="15" fill="rgb(247,98,35)" fg:x="31373" fg:w="12"/><text x="95.2305%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1,318 samples, 3.99%)</title><rect x="95.0168%" y="53" width="3.9902%" height="15" fill="rgb(247,138,52)" fg:x="31385" fg:w="1318"/><text x="95.2668%" y="63.50">libs..</text></g><g><title>libsystem_c.dylib`clock_gettime (1,345 samples, 4.07%)</title><rect x="94.9381%" y="69" width="4.0719%" height="15" fill="rgb(213,79,30)" fg:x="31359" fg:w="1345"/><text x="95.1881%" y="79.50">libs..</text></g><g><title>satrunner_server`parking_lot::condvar::Condvar::notify_one_slow (6,409 samples, 19.40%)</title><rect x="79.6222%" y="101" width="19.4030%" height="15" fill="rgb(246,177,23)" fg:x="26300" fg:w="6409"/><text x="79.8722%" y="111.50">satrunner_server`parking_lot::..</text></g><g><title>satrunner_server`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1,350 samples, 4.09%)</title><rect x="94.9381%" y="85" width="4.0871%" height="15" fill="rgb(230,62,27)" fg:x="31359" fg:w="1350"/><text x="95.1881%" y="95.50">satr..</text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (5 samples, 0.02%)</title><rect x="99.0100%" y="69" width="0.0151%" height="15" fill="rgb(216,154,8)" fg:x="32704" fg:w="5"/><text x="99.2600%" y="79.50"></text></g><g><title>satrunner_server`parking_lot_core::parking_lot::lock_bucket_pair (22 samples, 0.07%)</title><rect x="99.0252%" y="101" width="0.0666%" height="15" fill="rgb(244,35,45)" fg:x="32709" fg:w="22"/><text x="99.2752%" y="111.50"></text></g><g><title>satrunner_server`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (8 samples, 0.02%)</title><rect x="99.0918%" y="101" width="0.0242%" height="15" fill="rgb(251,115,12)" fg:x="32731" fg:w="8"/><text x="99.3418%" y="111.50"></text></g><g><title>satrunner_server`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 0.02%)</title><rect x="99.1160%" y="101" width="0.0212%" height="15" fill="rgb(240,54,50)" fg:x="32739" fg:w="7"/><text x="99.3660%" y="111.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (35 samples, 0.11%)</title><rect x="99.1372%" y="101" width="0.1060%" height="15" fill="rgb(233,84,52)" fg:x="32746" fg:w="35"/><text x="99.3872%" y="111.50"></text></g><g><title>satrunner_server`parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.02%)</title><rect x="99.2219%" y="85" width="0.0212%" height="15" fill="rgb(207,117,47)" fg:x="32774" fg:w="7"/><text x="99.4719%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.05%)</title><rect x="99.2704%" y="85" width="0.0454%" height="15" fill="rgb(249,43,39)" fg:x="32790" fg:w="15"/><text x="99.5204%" y="95.50"></text></g><g><title>satrunner_server`satrunner_server::game_loop::game_loop::_{{closure}} (10 samples, 0.03%)</title><rect x="99.4339%" y="69" width="0.0303%" height="15" fill="rgb(209,38,44)" fg:x="32844" fg:w="10"/><text x="99.6839%" y="79.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (14 samples, 0.04%)</title><rect x="99.5005%" y="37" width="0.0424%" height="15" fill="rgb(236,212,23)" fg:x="32866" fg:w="14"/><text x="99.7505%" y="47.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (123 samples, 0.37%)</title><rect x="99.4793%" y="53" width="0.3724%" height="15" fill="rgb(242,79,21)" fg:x="32859" fg:w="123"/><text x="99.7293%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (102 samples, 0.31%)</title><rect x="99.5429%" y="37" width="0.3088%" height="15" fill="rgb(211,96,35)" fg:x="32880" fg:w="102"/><text x="99.7929%" y="47.50"></text></g><g><title>satrunner_server`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (124 samples, 0.38%)</title><rect x="99.4793%" y="69" width="0.3754%" height="15" fill="rgb(253,215,40)" fg:x="32859" fg:w="124"/><text x="99.7293%" y="79.50"></text></g><g><title>satrunner_server`tokio::runtime::task::waker::clone_waker (4 samples, 0.01%)</title><rect x="99.8547%" y="69" width="0.0121%" height="15" fill="rgb(211,81,21)" fg:x="32983" fg:w="4"/><text x="100.1047%" y="79.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6,792 samples, 20.56%)</title><rect x="79.3103%" y="117" width="20.5625%" height="15" fill="rgb(208,190,38)" fg:x="26197" fg:w="6792"/><text x="79.5603%" y="127.50">satrunner_server`tokio::runtime:..</text></g><g><title>satrunner_server`tokio::runtime::task::raw::poll (208 samples, 0.63%)</title><rect x="99.2431%" y="101" width="0.6297%" height="15" fill="rgb(235,213,38)" fg:x="32781" fg:w="208"/><text x="99.4931%" y="111.50"></text></g><g><title>satrunner_server`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (176 samples, 0.53%)</title><rect x="99.3400%" y="85" width="0.5328%" height="15" fill="rgb(237,122,38)" fg:x="32813" fg:w="176"/><text x="99.5900%" y="95.50"></text></g><g><title>satrunner_server`tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (28 samples, 0.08%)</title><rect x="99.8728%" y="117" width="0.0848%" height="15" fill="rgb(244,218,35)" fg:x="32989" fg:w="28"/><text x="100.1228%" y="127.50"></text></g><g><title>all (33,031 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="33031"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (33,028 samples, 99.99%)</title><rect x="0.0091%" y="213" width="99.9909%" height="15" fill="rgb(210,16,53)" fg:x="3" fg:w="33028"/><text x="0.2591%" y="223.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (33,028 samples, 99.99%)</title><rect x="0.0091%" y="197" width="99.9909%" height="15" fill="rgb(235,124,12)" fg:x="3" fg:w="33028"/><text x="0.2591%" y="207.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>satrunner_server`std::sys::unix::thread::Thread::new::thread_start (33,028 samples, 99.99%)</title><rect x="0.0091%" y="181" width="99.9909%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="33028"/><text x="0.2591%" y="191.50">satrunner_server`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>satrunner_server`core::ops::function::FnOnce::call_once{{vtable.shim}} (33,028 samples, 99.99%)</title><rect x="0.0091%" y="165" width="99.9909%" height="15" fill="rgb(250,166,2)" fg:x="3" fg:w="33028"/><text x="0.2591%" y="175.50">satrunner_server`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>satrunner_server`std::sys_common::backtrace::__rust_begin_short_backtrace (33,028 samples, 99.99%)</title><rect x="0.0091%" y="149" width="99.9909%" height="15" fill="rgb(242,216,29)" fg:x="3" fg:w="33028"/><text x="0.2591%" y="159.50">satrunner_server`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>satrunner_server`tokio::runtime::task::raw::poll (32,975 samples, 99.83%)</title><rect x="0.1695%" y="133" width="99.8305%" height="15" fill="rgb(230,116,27)" fg:x="56" fg:w="32975"/><text x="0.4195%" y="143.50">satrunner_server`tokio::runtime::task::raw::poll</text></g><g><title>satrunner_server`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (9 samples, 0.03%)</title><rect x="99.9728%" y="117" width="0.0272%" height="15" fill="rgb(228,99,48)" fg:x="33022" fg:w="9"/><text x="100.2228%" y="127.50"></text></g></svg></svg>